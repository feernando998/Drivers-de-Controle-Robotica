;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 11/09/2020 13:12:55
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2927			GOTO	_main
$0199	$	_mul_32x32_u:
$0199	$1303			BCF	STATUS, RP1
$019A	$1283			BCF	STATUS, RP0
;math.ppas,1570 :: 		
;math.ppas,1578 :: 		
$019B	$3022			MOVLW	34
;math.ppas,1579 :: 		
$019C	$00FC			MOVWF	STACK_12
;math.ppas,1580 :: 		
$019D	$01F8			CLRF	STACK_8
;math.ppas,1581 :: 		
$019E	$01F9			CLRF	STACK_9
;math.ppas,1582 :: 		
$019F	$01FA			CLRF	STACK_10
;math.ppas,1584 :: 		
$01A0	$01FB			CLRF	STACK_11
;math.ppas,1588 :: 		
$01A1	$	_NEXT:
;math.ppas,1589 :: 		
$01A1	$03FC			DECF	STACK_12, F
;math.ppas,1590 :: 		
$01A2	$1903			BTFSC	STATUS, Z
;math.ppas,1591 :: 		
$01A3	$29CF			GOTO	_EXIT2
;math.ppas,1593 :: 		
$01A4	$1003			BCF	STATUS, C
;math.ppas,1602 :: 		
$01A5	$	_LOOP:
;math.ppas,1603 :: 		
$01A5	$0CFB			RRF	STACK_11, F
;math.ppas,1604 :: 		
$01A6	$0CFA			RRF	STACK_10, F
;math.ppas,1605 :: 		
$01A7	$0CF9			RRF	STACK_9, F
;math.ppas,1606 :: 		
$01A8	$0CF8			RRF	STACK_8, F
;math.ppas,1607 :: 		
$01A9	$0CF3			RRF	STACK_3, F
;math.ppas,1608 :: 		
$01AA	$0CF2			RRF	STACK_2, F
;math.ppas,1609 :: 		
$01AB	$0CF1			RRF	STACK_1, F
;math.ppas,1614 :: 		
$01AC	$0CF0			RRF	STACK_0, F
;math.ppas,1615 :: 		
$01AD	$1C03			BTFSS	STATUS, C
;math.ppas,1616 :: 		
$01AE	$29A1			GOTO	_NEXT
;math.ppas,1617 :: 		
$01AF	$03FC			DECF	STACK_12, F
;math.ppas,1618 :: 		
$01B0	$1903			BTFSC	STATUS, Z
;math.ppas,1625 :: 		
$01B1	$29C1			GOTO	_EXIT1
;math.ppas,1626 :: 		
$01B2	$0874			MOVF	STACK_4, W
;math.ppas,1627 :: 		
$01B3	$07F8			ADDWF	STACK_8, F
;math.ppas,1628 :: 		
$01B4	$0875			MOVF	STACK_5, W
;math.ppas,1629 :: 		
$01B5	$1803			BTFSC	STATUS, C
;math.ppas,1630 :: 		
$01B6	$0F75			INCFSZ	STACK_5, W
;math.ppas,1631 :: 		
$01B7	$07F9			ADDWF	STACK_9, F
;math.ppas,1632 :: 		
$01B8	$0876			MOVF	STACK_6, W
;math.ppas,1633 :: 		
$01B9	$1803			BTFSC	STATUS, C
;math.ppas,1634 :: 		
$01BA	$0F76			INCFSZ	STACK_6, W
;math.ppas,1635 :: 		
$01BB	$07FA			ADDWF	STACK_10, F
;math.ppas,1636 :: 		
$01BC	$0877			MOVF	STACK_7, W
;math.ppas,1637 :: 		
$01BD	$1803			BTFSC	STATUS, C
;math.ppas,1638 :: 		
$01BE	$0F77			INCFSZ	STACK_7, W
;math.ppas,1640 :: 		
$01BF	$07FB			ADDWF	STACK_11, F
;math.ppas,1642 :: 		
$01C0	$29A5			GOTO	_LOOP
;math.ppas,1647 :: 		
$01C1	$	_EXIT1:
;math.ppas,1648 :: 		
$01C1	$0874			MOVF	STACK_4, W
;math.ppas,1649 :: 		
$01C2	$07F8			ADDWF	STACK_8, F
;math.ppas,1650 :: 		
$01C3	$0875			MOVF	STACK_5, W
;math.ppas,1651 :: 		
$01C4	$1803			BTFSC	STATUS, C
;math.ppas,1652 :: 		
$01C5	$0F75			INCFSZ	STACK_5, W
;math.ppas,1653 :: 		
$01C6	$07F9			ADDWF	STACK_9, F
;math.ppas,1654 :: 		
$01C7	$0876			MOVF	STACK_6, W
;math.ppas,1655 :: 		
$01C8	$1803			BTFSC	STATUS, C
;math.ppas,1656 :: 		
$01C9	$0F76			INCFSZ	STACK_6, W
;math.ppas,1657 :: 		
$01CA	$07FA			ADDWF	STACK_10, F
;math.ppas,1658 :: 		
$01CB	$0877			MOVF	STACK_7, W
;math.ppas,1659 :: 		
$01CC	$1803			BTFSC	STATUS, C
;math.ppas,1660 :: 		
$01CD	$0F77			INCFSZ	STACK_7, W
;math.ppas,1663 :: 		
$01CE	$07FB			ADDWF	STACK_11, F
;math.ppas,1664 :: 		
$01CF	$	_EXIT2:
;math.ppas,1665 :: 		
$01CF	$	math_L_13:
;math.ppas,1666 :: 		
$01CF	$0008			RETURN
$009F	$	_vdelay_ms:
;delays.pbas,65 :: 		dim NumberOfCyc as dword
;delays.pbas,67 :: 		NumberOfCyc = Clock_kHz >> 2 ' this will be done by compiler, no asm will be genereated except that for assignment
$009F	$30E8			MOVLW	232
$00A0	$1303			BCF	STATUS, RP1
$00A1	$1283			BCF	STATUS, RP0
$00A2	$00A8			MOVWF	_vdelay_ms_local_numberofcyc
$00A3	$3003			MOVLW	3
$00A4	$00A9			MOVWF	_vdelay_ms_local_numberofcyc+1
$00A5	$01AA			CLRF	_vdelay_ms_local_numberofcyc+2
$00A6	$01AB			CLRF	_vdelay_ms_local_numberofcyc+3
;delays.pbas,68 :: 		NumberOfCyc = Time_ms * NumberOfCyc
$00A7	$0826			MOVF	FARG_VDelay_ms, 0
$00A8	$00F0			MOVWF	STACK_0
$00A9	$0827			MOVF	FARG_VDelay_ms+1, 0
$00AA	$00F1			MOVWF	STACK_0+1
$00AB	$01F2			CLRF	STACK_0+2
$00AC	$01F3			CLRF	STACK_0+3
$00AD	$30E8			MOVLW	232
$00AE	$00F4			MOVWF	STACK_4
$00AF	$3003			MOVLW	3
$00B0	$00F5			MOVWF	STACK_4+1
$00B1	$3000			MOVLW	0
$00B2	$00F6			MOVWF	STACK_4+2
$00B3	$3000			MOVLW	0
$00B4	$00F7			MOVWF	STACK_4+3
$00B5	$2199			CALL	_mul_32x32_u
$00B6	$0870			MOVF	STACK_0, 0
$00B7	$00A8			MOVWF	_vdelay_ms_local_numberofcyc
$00B8	$0871			MOVF	STACK_0+1, 0
$00B9	$00A9			MOVWF	_vdelay_ms_local_numberofcyc+1
$00BA	$0872			MOVF	STACK_0+2, 0
$00BB	$00AA			MOVWF	_vdelay_ms_local_numberofcyc+2
$00BC	$0873			MOVF	STACK_0+3, 0
$00BD	$00AB			MOVWF	_vdelay_ms_local_numberofcyc+3
;delays.pbas,69 :: 		if NumberOfCyc < 675 then
$00BE	$3000			MOVLW	0
$00BF	$0273			SUBWF	STACK_0+3, 0
$00C0	$1D03			BTFSS	STATUS, Z
$00C1	$28CC			GOTO	L_VDelay_ms_0
$00C2	$3000			MOVLW	0
$00C3	$0272			SUBWF	STACK_0+2, 0
$00C4	$1D03			BTFSS	STATUS, Z
$00C5	$28CC			GOTO	L_VDelay_ms_0
$00C6	$3002			MOVLW	2
$00C7	$0271			SUBWF	STACK_0+1, 0
$00C8	$1D03			BTFSS	STATUS, Z
$00C9	$28CC			GOTO	L_VDelay_ms_0
$00CA	$30A3			MOVLW	163
$00CB	$0270			SUBWF	STACK_0, 0
$00CC	$	L_VDelay_ms_0:
$00CC	$1803			BTFSC	STATUS, C
$00CD	$28CF			GOTO	delays_L_19
$00CE	$	delays_L_18:
;delays.pbas,70 :: 		exit
$00CE	$2926			GOTO	delays_L_17
$00CF	$	delays_L_19:
;delays.pbas,71 :: 		end if
$00CF	$	delays_L_20:
;delays.pbas,72 :: 		NumberOfCyc = NumberOfCyc - 675
$00CF	$30A3			MOVLW	163
$00D0	$00F0			MOVWF	STACK_0
$00D1	$3002			MOVLW	2
$00D2	$00F1			MOVWF	STACK_0+1
$00D3	$01F2			CLRF	STACK_0+2
$00D4	$01F3			CLRF	STACK_0+3
$00D5	$0828			MOVF	_vdelay_ms_local_numberofcyc, 0
$00D6	$00F4			MOVWF	STACK_4
$00D7	$0829			MOVF	_vdelay_ms_local_numberofcyc+1, 0
$00D8	$00F5			MOVWF	STACK_4+1
$00D9	$082A			MOVF	_vdelay_ms_local_numberofcyc+2, 0
$00DA	$00F6			MOVWF	STACK_4+2
$00DB	$082B			MOVF	_vdelay_ms_local_numberofcyc+3, 0
$00DC	$00F7			MOVWF	STACK_4+3
$00DD	$0870			MOVF	STACK_0, 0
$00DE	$02F4			SUBWF	STACK_4, 1
$00DF	$0871			MOVF	STACK_0+1, 0
$00E0	$1C03			BTFSS	STATUS, C
$00E1	$0F71			INCFSZ	STACK_0+1, 0
$00E2	$02F5			SUBWF	STACK_4+1, 1
$00E3	$0872			MOVF	STACK_0+2, 0
$00E4	$1C03			BTFSS	STATUS, C
$00E5	$0F72			INCFSZ	STACK_0+2, 0
$00E6	$02F6			SUBWF	STACK_4+2, 1
$00E7	$0873			MOVF	STACK_0+3, 0
$00E8	$1C03			BTFSS	STATUS, C
$00E9	$0F73			INCFSZ	STACK_0+3, 0
$00EA	$02F7			SUBWF	STACK_4+3, 1
$00EB	$0874			MOVF	STACK_4, 0
$00EC	$00A8			MOVWF	_vdelay_ms_local_numberofcyc
$00ED	$0875			MOVF	STACK_4+1, 0
$00EE	$00A9			MOVWF	_vdelay_ms_local_numberofcyc+1
$00EF	$0876			MOVF	STACK_4+2, 0
$00F0	$00AA			MOVWF	_vdelay_ms_local_numberofcyc+2
$00F1	$0877			MOVF	STACK_4+3, 0
$00F2	$00AB			MOVWF	_vdelay_ms_local_numberofcyc+3
;delays.pbas,73 :: 		NumberOfCyc = NumberOfCyc >> 5  ' Dec and While below take around 32 instructions
$00F3	$3005			MOVLW	5
$00F4	$00F0			MOVWF	STACK_0
$00F5	$0874			MOVF	STACK_4, 0
$00F6	$00A8			MOVWF	_vdelay_ms_local_numberofcyc
$00F7	$0875			MOVF	STACK_4+1, 0
$00F8	$00A9			MOVWF	_vdelay_ms_local_numberofcyc+1
$00F9	$0876			MOVF	STACK_4+2, 0
$00FA	$00AA			MOVWF	_vdelay_ms_local_numberofcyc+2
$00FB	$0877			MOVF	STACK_4+3, 0
$00FC	$00AB			MOVWF	_vdelay_ms_local_numberofcyc+3
$00FD	$0870			MOVF	STACK_0, 0
$00FE	$	L_VDelay_ms_1:
$00FE	$1903			BTFSC	STATUS, Z
$00FF	$2907			GOTO	L_VDelay_ms_2
$0100	$0CAB			RRF	_vdelay_ms_local_numberofcyc+3, 1
$0101	$0CAA			RRF	_vdelay_ms_local_numberofcyc+2, 1
$0102	$0CA9			RRF	_vdelay_ms_local_numberofcyc+1, 1
$0103	$0CA8			RRF	_vdelay_ms_local_numberofcyc, 1
$0104	$13AB			BCF	_vdelay_ms_local_numberofcyc+3, 7
$0105	$3FFF			ADDLW	255
$0106	$28FE			GOTO	L_VDelay_ms_1
$0107	$	L_VDelay_ms_2:
;delays.pbas,74 :: 		while ( Lo(NumberOfCyc) or Hi(NumberOfCyc) or Higher(NumberOfCyc) or Highest(NumberOfCyc) ) <> 0
$0107	$	delays_L_22:
$0107	$30FF			MOVLW	255
$0108	$0528			ANDWF	_vdelay_ms_local_numberofcyc, 0
$0109	$00F8			MOVWF	STACK_8
$010A	$0829			MOVF	_vdelay_ms_local_numberofcyc+1, 0
$010B	$00F0			MOVWF	STACK_0
$010C	$0870			MOVF	STACK_0, 0
$010D	$04F8			IORWF	STACK_8, 1
$010E	$082A			MOVF	_vdelay_ms_local_numberofcyc+2, 0
$010F	$00F0			MOVWF	STACK_0
$0110	$082B			MOVF	_vdelay_ms_local_numberofcyc+3, 0
$0111	$00F1			MOVWF	STACK_0+1
$0112	$0870			MOVF	STACK_0, 0
$0113	$04F8			IORWF	STACK_8, 1
$0114	$082B			MOVF	_vdelay_ms_local_numberofcyc+3, 0
$0115	$00F0			MOVWF	STACK_0
$0116	$0870			MOVF	STACK_0, 0
$0117	$0478			IORWF	STACK_8, 0
$0118	$00F4			MOVWF	STACK_4
$0119	$0874			MOVF	STACK_4, 0
$011A	$3A00			XORLW	0
$011B	$1903			BTFSC	STATUS, Z
$011C	$2926			GOTO	delays_L_23
;delays.pbas,75 :: 		Dec(NumberOfCyc)
$011D	$3001			MOVLW	1
$011E	$02A8			SUBWF	_vdelay_ms_local_numberofcyc, 1
$011F	$1C03			BTFSS	STATUS, C
$0120	$02A9			SUBWF	_vdelay_ms_local_numberofcyc+1, 1
$0121	$1C03			BTFSS	STATUS, C
$0122	$02AA			SUBWF	_vdelay_ms_local_numberofcyc+2, 1
$0123	$1C03			BTFSS	STATUS, C
$0124	$02AB			SUBWF	_vdelay_ms_local_numberofcyc+3, 1
$0125	$2907			GOTO	delays_L_22
$0126	$	delays_L_23:
;delays.pbas,76 :: 		wend
$0126	$	delays_L_17:
$0126	$0008			RETURN
$0004	$	_giramotor:
;DriverDeControle.pbas,5 :: 		sub procedure giraMotor(dim invert as boolean)
;DriverDeControle.pbas,7 :: 		while PORTA.0 = 1
$0004	$	DriverDeControle_L_2:
$0004	$3001			MOVLW	1
$0005	$1303			BCF	STATUS, RP1
$0006	$1283			BCF	STATUS, RP0
$0007	$0505			ANDWF	PORTA, 0
$0008	$00F1			MOVWF	STACK_1
$0009	$0871			MOVF	STACK_1, 0
$000A	$3A01			XORLW	1
$000B	$1D03			BTFSS	STATUS, Z
$000C	$284A			GOTO	DriverDeControle_L_3
;DriverDeControle.pbas,8 :: 		if invert then
$000D	$0822			MOVF	FARG_giraMotor, 0
$000E	$1903			BTFSC	STATUS, Z
$000F	$282D			GOTO	DriverDeControle_L_7
$0010	$	DriverDeControle_L_6:
;DriverDeControle.pbas,9 :: 		PORTC=8 vdelay_ms(tmpOn)
$0010	$3008			MOVLW	8
$0011	$0087			MOVWF	PORTC
$0012	$0820			MOVF	_tmpon, 0
$0013	$00A6			MOVWF	FARG_VDelay_ms
$0014	$0821			MOVF	_tmpon+1, 0
$0015	$00A7			MOVWF	FARG_VDelay_ms+1
$0016	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,10 :: 		PORTC=4 vdelay_ms(tmpOn)
$0017	$3004			MOVLW	4
$0018	$0087			MOVWF	PORTC
$0019	$0820			MOVF	_tmpon, 0
$001A	$00A6			MOVWF	FARG_VDelay_ms
$001B	$0821			MOVF	_tmpon+1, 0
$001C	$00A7			MOVWF	FARG_VDelay_ms+1
$001D	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,11 :: 		PORTC=2 vdelay_ms(tmpOn)
$001E	$3002			MOVLW	2
$001F	$0087			MOVWF	PORTC
$0020	$0820			MOVF	_tmpon, 0
$0021	$00A6			MOVWF	FARG_VDelay_ms
$0022	$0821			MOVF	_tmpon+1, 0
$0023	$00A7			MOVWF	FARG_VDelay_ms+1
$0024	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,12 :: 		PORTC=1 vdelay_ms(tmpOn)
$0025	$3001			MOVLW	1
$0026	$0087			MOVWF	PORTC
$0027	$0820			MOVF	_tmpon, 0
$0028	$00A6			MOVWF	FARG_VDelay_ms
$0029	$0821			MOVF	_tmpon+1, 0
$002A	$00A7			MOVWF	FARG_VDelay_ms+1
$002B	$209F			CALL	_vdelay_ms
$002C	$2849			GOTO	DriverDeControle_L_8
;DriverDeControle.pbas,13 :: 		else
$002D	$	DriverDeControle_L_7:
;DriverDeControle.pbas,14 :: 		PORTC=1 VDelay_ms(tmpOn)
$002D	$3001			MOVLW	1
$002E	$0087			MOVWF	PORTC
$002F	$0820			MOVF	_tmpon, 0
$0030	$00A6			MOVWF	FARG_VDelay_ms
$0031	$0821			MOVF	_tmpon+1, 0
$0032	$00A7			MOVWF	FARG_VDelay_ms+1
$0033	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,15 :: 		PORTC=2 vdelay_ms(tmpOn)
$0034	$3002			MOVLW	2
$0035	$0087			MOVWF	PORTC
$0036	$0820			MOVF	_tmpon, 0
$0037	$00A6			MOVWF	FARG_VDelay_ms
$0038	$0821			MOVF	_tmpon+1, 0
$0039	$00A7			MOVWF	FARG_VDelay_ms+1
$003A	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,16 :: 		PORTC=4 vdelay_ms(tmpOn)
$003B	$3004			MOVLW	4
$003C	$0087			MOVWF	PORTC
$003D	$0820			MOVF	_tmpon, 0
$003E	$00A6			MOVWF	FARG_VDelay_ms
$003F	$0821			MOVF	_tmpon+1, 0
$0040	$00A7			MOVWF	FARG_VDelay_ms+1
$0041	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,17 :: 		PORTC=8 vdelay_ms(tmpOn)
$0042	$3008			MOVLW	8
$0043	$0087			MOVWF	PORTC
$0044	$0820			MOVF	_tmpon, 0
$0045	$00A6			MOVWF	FARG_VDelay_ms
$0046	$0821			MOVF	_tmpon+1, 0
$0047	$00A7			MOVWF	FARG_VDelay_ms+1
$0048	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,18 :: 		end if
$0049	$	DriverDeControle_L_8:
$0049	$2804			GOTO	DriverDeControle_L_2
$004A	$	DriverDeControle_L_3:
;DriverDeControle.pbas,21 :: 		while (PORTA.0 = 1) and (PORTA.2 = 1)
$004A	$	DriverDeControle_L_10:
$004A	$3001			MOVLW	1
$004B	$0505			ANDWF	PORTA, 0
$004C	$00F1			MOVWF	STACK_1
$004D	$0871			MOVF	STACK_1, 0
$004E	$3A01			XORLW	1
$004F	$30FF			MOVLW	255
$0050	$1D03			BTFSS	STATUS, Z
$0051	$3000			MOVLW	0
$0052	$00F2			MOVWF	STACK_2
$0053	$3000			MOVLW	0
$0054	$1905			BTFSC	PORTA, 2
$0055	$3001			MOVLW	1
$0056	$00F1			MOVWF	STACK_1
$0057	$0871			MOVF	STACK_1, 0
$0058	$3A01			XORLW	1
$0059	$30FF			MOVLW	255
$005A	$1D03			BTFSS	STATUS, Z
$005B	$3000			MOVLW	0
$005C	$00F0			MOVWF	STACK_0
$005D	$0872			MOVF	STACK_2, 0
$005E	$05F0			ANDWF	STACK_0, 1
$005F	$1903			BTFSC	STATUS, Z
$0060	$289E			GOTO	DriverDeControle_L_11
;DriverDeControle.pbas,22 :: 		if invert then
$0061	$0822			MOVF	FARG_giraMotor, 0
$0062	$1903			BTFSC	STATUS, Z
$0063	$2881			GOTO	DriverDeControle_L_15
$0064	$	DriverDeControle_L_14:
;DriverDeControle.pbas,23 :: 		PORTC=9 vdelay_ms(tmpOn)
$0064	$3009			MOVLW	9
$0065	$0087			MOVWF	PORTC
$0066	$0820			MOVF	_tmpon, 0
$0067	$00A6			MOVWF	FARG_VDelay_ms
$0068	$0821			MOVF	_tmpon+1, 0
$0069	$00A7			MOVWF	FARG_VDelay_ms+1
$006A	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,24 :: 		PORTC=4 vdelay_ms(tmpOn)
$006B	$3004			MOVLW	4
$006C	$0087			MOVWF	PORTC
$006D	$0820			MOVF	_tmpon, 0
$006E	$00A6			MOVWF	FARG_VDelay_ms
$006F	$0821			MOVF	_tmpon+1, 0
$0070	$00A7			MOVWF	FARG_VDelay_ms+1
$0071	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,25 :: 		PORTC=2 vdelay_ms(tmpOn)
$0072	$3002			MOVLW	2
$0073	$0087			MOVWF	PORTC
$0074	$0820			MOVF	_tmpon, 0
$0075	$00A6			MOVWF	FARG_VDelay_ms
$0076	$0821			MOVF	_tmpon+1, 0
$0077	$00A7			MOVWF	FARG_VDelay_ms+1
$0078	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,26 :: 		PORTC=1 vdelay_ms(tmpOn)
$0079	$3001			MOVLW	1
$007A	$0087			MOVWF	PORTC
$007B	$0820			MOVF	_tmpon, 0
$007C	$00A6			MOVWF	FARG_VDelay_ms
$007D	$0821			MOVF	_tmpon+1, 0
$007E	$00A7			MOVWF	FARG_VDelay_ms+1
$007F	$209F			CALL	_vdelay_ms
$0080	$289D			GOTO	DriverDeControle_L_16
;DriverDeControle.pbas,27 :: 		else
$0081	$	DriverDeControle_L_15:
;DriverDeControle.pbas,28 :: 		PORTC=1 VDelay_ms(tmpOn)
$0081	$3001			MOVLW	1
$0082	$0087			MOVWF	PORTC
$0083	$0820			MOVF	_tmpon, 0
$0084	$00A6			MOVWF	FARG_VDelay_ms
$0085	$0821			MOVF	_tmpon+1, 0
$0086	$00A7			MOVWF	FARG_VDelay_ms+1
$0087	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,29 :: 		PORTC=2 vdelay_ms(tmpOn)
$0088	$3002			MOVLW	2
$0089	$0087			MOVWF	PORTC
$008A	$0820			MOVF	_tmpon, 0
$008B	$00A6			MOVWF	FARG_VDelay_ms
$008C	$0821			MOVF	_tmpon+1, 0
$008D	$00A7			MOVWF	FARG_VDelay_ms+1
$008E	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,30 :: 		PORTC=4 vdelay_ms(tmpOn)
$008F	$3004			MOVLW	4
$0090	$0087			MOVWF	PORTC
$0091	$0820			MOVF	_tmpon, 0
$0092	$00A6			MOVWF	FARG_VDelay_ms
$0093	$0821			MOVF	_tmpon+1, 0
$0094	$00A7			MOVWF	FARG_VDelay_ms+1
$0095	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,31 :: 		PORTC=9 vdelay_ms(tmpOn)
$0096	$3009			MOVLW	9
$0097	$0087			MOVWF	PORTC
$0098	$0820			MOVF	_tmpon, 0
$0099	$00A6			MOVWF	FARG_VDelay_ms
$009A	$0821			MOVF	_tmpon+1, 0
$009B	$00A7			MOVWF	FARG_VDelay_ms+1
$009C	$209F			CALL	_vdelay_ms
;DriverDeControle.pbas,32 :: 		end if
$009D	$	DriverDeControle_L_16:
$009D	$284A			GOTO	DriverDeControle_L_10
$009E	$	DriverDeControle_L_11:
;DriverDeControle.pbas,33 :: 		wend
$009E	$	DriverDeControle_L_0:
$009E	$0008			RETURN
$01D0	$	_usart_init:
;USART_b75.ppas,22 :: 		
;USART_b75.ppas,24 :: 		
$01D0	$	USART_b75_L_1:
$01D0	$1303			BCF	STATUS, RP1
$01D1	$1683			BSF	STATUS, RP0
$01D2	$1698			BSF	TXSTA, 5
$01D3	$	USART_b75_L_2:
;USART_b75.ppas,25 :: 		
$01D3	$3090			MOVLW	144
$01D4	$1283			BCF	STATUS, RP0
$01D5	$0098			MOVWF	RCSTA
;USART_b75.ppas,31 :: 		
$01D6	$	USART_b75_L_3:
$01D6	$1683			BSF	STATUS, RP0
$01D7	$1686			BSF	TRISB, 5
$01D8	$	USART_b75_L_4:
;USART_b75.ppas,32 :: 		
$01D8	$	USART_b75_L_5:
$01D8	$1786			BSF	TRISB, 7
$01D9	$	USART_b75_L_6:
;USART_b75.ppas,35 :: 		
$01D9	$	USART_b75_L_8:
$01D9	$1283			BCF	STATUS, RP0
$01DA	$080C			MOVF	PIR1, 0
$01DB	$00F1			MOVWF	STACK_1
$01DC	$3000			MOVLW	0
$01DD	$1AF1			BTFSC	STACK_1, 5
$01DE	$3001			MOVLW	1
$01DF	$00F1			MOVWF	STACK_1
$01E0	$0871			MOVF	STACK_1, 0
$01E1	$3A01			XORLW	1
$01E2	$1903			BTFSC	STATUS, Z
$01E3	$29D9			GOTO	USART_b75_L_8
;USART_b75.ppas,36 :: 		
$01E4	$	USART_b75_L_9:
$01E4	$	USART_b75_L_0:
;USART_b75.ppas,37 :: 		
$01E4	$0008			RETURN
$0127	$	_main:
;DriverDeControle.pbas,39 :: 		main:
$0127	$	_main_main:
;DriverDeControle.pbas,40 :: 		TRISA=%11111111
$0127	$30FF			MOVLW	255
$0128	$1303			BCF	STATUS, RP1
$0129	$1683			BSF	STATUS, RP0
$012A	$0085			MOVWF	TRISA
;DriverDeControle.pbas,41 :: 		TRISB=%11111111
$012B	$30FF			MOVLW	255
$012C	$0086			MOVWF	TRISB
;DriverDeControle.pbas,42 :: 		TRISC=%00000000
$012D	$0187			CLRF	TRISC, 1
;DriverDeControle.pbas,43 :: 		INTCON=%00000000
$012E	$018B			CLRF	INTCON, 1
;DriverDeControle.pbas,44 :: 		ANSEL=%00000000
$012F	$1703			BSF	STATUS, RP1
$0130	$1283			BCF	STATUS, RP0
$0131	$019E			CLRF	ANSEL, 1
;DriverDeControle.pbas,45 :: 		ANSELH=%00000000
$0132	$019F			CLRF	ANSELH, 1
;DriverDeControle.pbas,46 :: 		PORTA=0
$0133	$1303			BCF	STATUS, RP1
$0134	$0185			CLRF	PORTA, 1
;DriverDeControle.pbas,47 :: 		PORTC=0
$0135	$0187			CLRF	PORTC, 1
;DriverDeControle.pbas,49 :: 		Usart_Init(9600)
$0136	$3019			MOVLW	25
$0137	$1683			BSF	STATUS, RP0
$0138	$0099			MOVWF	SPBRG
$0139	$1518			BSF	TXSTA, BRGH
$013A	$21D0			CALL	_usart_init
;DriverDeControle.pbas,51 :: 		tmpOn=50
$013B	$3032			MOVLW	50
$013C	$00A0			MOVWF	_tmpon
$013D	$01A1			CLRF	_tmpon+1
;DriverDeControle.pbas,53 :: 		executa:
$013E	$	_main_executa:
;DriverDeControle.pbas,54 :: 		if PORTA.1 = 1 then
$013E	$3000			MOVLW	0
$013F	$1885			BTFSC	PORTA, 1
$0140	$3001			MOVLW	1
$0141	$00F1			MOVWF	STACK_1
$0142	$0871			MOVF	STACK_1, 0
$0143	$3A01			XORLW	1
$0144	$1D03			BTFSS	STATUS, Z
$0145	$2949			GOTO	DriverDeControle_L_19
$0146	$	DriverDeControle_L_18:
;DriverDeControle.pbas,55 :: 		giraMotor(true)
$0146	$30FF			MOVLW	255
$0147	$00A2			MOVWF	FARG_giraMotor
$0148	$2004			CALL	_giramotor
$0149	$	DriverDeControle_L_19:
;DriverDeControle.pbas,56 :: 		end if
$0149	$	DriverDeControle_L_20:
;DriverDeControle.pbas,57 :: 		if PORTA.1 = 0 then
$0149	$3000			MOVLW	0
$014A	$1885			BTFSC	PORTA, 1
$014B	$3001			MOVLW	1
$014C	$00F1			MOVWF	STACK_1
$014D	$0871			MOVF	STACK_1, 0
$014E	$3A00			XORLW	0
$014F	$1D03			BTFSS	STATUS, Z
$0150	$2953			GOTO	DriverDeControle_L_22
$0151	$	DriverDeControle_L_21:
;DriverDeControle.pbas,58 :: 		giraMotor(false)
$0151	$01A2			CLRF	FARG_giraMotor, 1
$0152	$2004			CALL	_giramotor
$0153	$	DriverDeControle_L_22:
;DriverDeControle.pbas,59 :: 		end if
$0153	$	DriverDeControle_L_23:
;DriverDeControle.pbas,60 :: 		if (PORTA.2 = 1) and (PORTA.1 = 1)  then
$0153	$3000			MOVLW	0
$0154	$1905			BTFSC	PORTA, 2
$0155	$3001			MOVLW	1
$0156	$00F1			MOVWF	STACK_1
$0157	$0871			MOVF	STACK_1, 0
$0158	$3A01			XORLW	1
$0159	$30FF			MOVLW	255
$015A	$1D03			BTFSS	STATUS, Z
$015B	$3000			MOVLW	0
$015C	$00F2			MOVWF	STACK_2
$015D	$3000			MOVLW	0
$015E	$1885			BTFSC	PORTA, 1
$015F	$3001			MOVLW	1
$0160	$00F1			MOVWF	STACK_1
$0161	$0871			MOVF	STACK_1, 0
$0162	$3A01			XORLW	1
$0163	$30FF			MOVLW	255
$0164	$1D03			BTFSS	STATUS, Z
$0165	$3000			MOVLW	0
$0166	$00F0			MOVWF	STACK_0
$0167	$0872			MOVF	STACK_2, 0
$0168	$05F0			ANDWF	STACK_0, 1
$0169	$1903			BTFSC	STATUS, Z
$016A	$296E			GOTO	DriverDeControle_L_25
$016B	$	DriverDeControle_L_24:
;DriverDeControle.pbas,61 :: 		giraMotor(true)
$016B	$30FF			MOVLW	255
$016C	$00A2			MOVWF	FARG_giraMotor
$016D	$2004			CALL	_giramotor
$016E	$	DriverDeControle_L_25:
;DriverDeControle.pbas,62 :: 		end if
$016E	$	DriverDeControle_L_26:
;DriverDeControle.pbas,63 :: 		if (PORTA.2 = 1) and (PORTA.1 = 0)  then
$016E	$3000			MOVLW	0
$016F	$1905			BTFSC	PORTA, 2
$0170	$3001			MOVLW	1
$0171	$00F1			MOVWF	STACK_1
$0172	$0871			MOVF	STACK_1, 0
$0173	$3A01			XORLW	1
$0174	$30FF			MOVLW	255
$0175	$1D03			BTFSS	STATUS, Z
$0176	$3000			MOVLW	0
$0177	$00F2			MOVWF	STACK_2
$0178	$3000			MOVLW	0
$0179	$1885			BTFSC	PORTA, 1
$017A	$3001			MOVLW	1
$017B	$00F1			MOVWF	STACK_1
$017C	$0871			MOVF	STACK_1, 0
$017D	$3A00			XORLW	0
$017E	$30FF			MOVLW	255
$017F	$1D03			BTFSS	STATUS, Z
$0180	$3000			MOVLW	0
$0181	$00F0			MOVWF	STACK_0
$0182	$0872			MOVF	STACK_2, 0
$0183	$05F0			ANDWF	STACK_0, 1
$0184	$1903			BTFSC	STATUS, Z
$0185	$2988			GOTO	DriverDeControle_L_28
$0186	$	DriverDeControle_L_27:
;DriverDeControle.pbas,64 :: 		giraMotor(false)
$0186	$01A2			CLRF	FARG_giraMotor, 1
$0187	$2004			CALL	_giramotor
$0188	$	DriverDeControle_L_28:
;DriverDeControle.pbas,65 :: 		end if
$0188	$	DriverDeControle_L_29:
;DriverDeControle.pbas,67 :: 		delay_ms(10)
$0188	$300D			MOVLW	13
$0189	$00FB			MOVWF	STACK_11
$018A	$30FF			MOVLW	255
$018B	$00FA			MOVWF	STACK_10
$018C	$0BFB			DECFSZ	STACK_11, F
$018D	$298F			GOTO	$+2
$018E	$2992			GOTO	$+4
$018F	$0BFA			DECFSZ	STACK_10, F
$0190	$298F			GOTO	$-1
$0191	$298C			GOTO	$-5
$0192	$30F3			MOVLW	243
$0193	$00FA			MOVWF	STACK_10
$0194	$0BFA			DECFSZ	STACK_10, F
$0195	$2994			GOTO	$-1
$0196	$0000			NOP
;DriverDeControle.pbas,69 :: 		goto executa
$0197	$293E			GOTO	_main_executa
$0198	$2998			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		giraMotor
$009F		VDelay_ms
$0127		main
$0199		Mul_32x32_U
$01D0		USART_Init


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_giramotor:
$0004		DriverDeControle_L_2:
$0010		DriverDeControle_L_6:
$002D		DriverDeControle_L_7:
$0049		DriverDeControle_L_8:
$004A		DriverDeControle_L_10:
$004A		DriverDeControle_L_3:
$0064		DriverDeControle_L_14:
$0081		DriverDeControle_L_15:
$009D		DriverDeControle_L_16:
$009E		DriverDeControle_L_0:
$009E		DriverDeControle_L_11:
$009F		_vdelay_ms:
$00CC		L_VDelay_ms_0:
$00CE		delays_L_18:
$00CF		delays_L_19:
$00CF		delays_L_20:
$00FE		L_VDelay_ms_1:
$0107		delays_L_22:
$0107		L_VDelay_ms_2:
$0126		delays_L_17:
$0126		delays_L_23:
$0127		_main:
$0127		_main_main:
$013E		_main_executa:
$0146		DriverDeControle_L_18:
$0149		DriverDeControle_L_19:
$0149		DriverDeControle_L_20:
$0151		DriverDeControle_L_21:
$0153		DriverDeControle_L_22:
$0153		DriverDeControle_L_23:
$016B		DriverDeControle_L_24:
$016E		DriverDeControle_L_25:
$016E		DriverDeControle_L_26:
$0186		DriverDeControle_L_27:
$0188		DriverDeControle_L_28:
$0188		DriverDeControle_L_29:
$0199		_mul_32x32_u:
$01A1		_NEXT:
$01A5		_LOOP:
$01C1		_EXIT1:
$01CF		_EXIT2:
$01CF		math_L_13:
$01D0		_usart_init:
$01D0		USART_b75_L_1:
$01D3		USART_b75_L_2:
$01D6		USART_b75_L_3:
$01D8		USART_b75_L_4:
$01D8		USART_b75_L_5:
$01D9		USART_b75_L_6:
$01D9		USART_b75_L_8:
$01E4		USART_b75_L_0:
$01E4		USART_b75_L_9:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0007		PORTC
$000A		PCLATH
$000B		INTCON
$000C		PIR1
$0018		RCSTA
$001A		RCREG
$0020		_tmpon
$0022		FARG_giraMotor
$0022		FARG_USART_Init
$0026		FARG_VDelay_ms
$0028		_vdelay_ms_local_numberofcyc
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0098		TXSTA
$0099		SPBRG
$011E		ANSEL
$011F		ANSELH


