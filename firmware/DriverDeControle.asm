;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 09/09/2020 19:00:36
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$290B			GOTO	_main
$00D4	$	_mul_32x32_u:
$00D4	$1303			BCF	STATUS, RP1
$00D5	$1283			BCF	STATUS, RP0
;math.ppas,1570 :: 		
;math.ppas,1578 :: 		
$00D6	$3022			MOVLW	34
;math.ppas,1579 :: 		
$00D7	$00FC			MOVWF	STACK_12
;math.ppas,1580 :: 		
$00D8	$01F8			CLRF	STACK_8
;math.ppas,1581 :: 		
$00D9	$01F9			CLRF	STACK_9
;math.ppas,1582 :: 		
$00DA	$01FA			CLRF	STACK_10
;math.ppas,1584 :: 		
$00DB	$01FB			CLRF	STACK_11
;math.ppas,1588 :: 		
$00DC	$	_NEXT:
;math.ppas,1589 :: 		
$00DC	$03FC			DECF	STACK_12, F
;math.ppas,1590 :: 		
$00DD	$1903			BTFSC	STATUS, Z
;math.ppas,1591 :: 		
$00DE	$290A			GOTO	_EXIT2
;math.ppas,1593 :: 		
$00DF	$1003			BCF	STATUS, C
;math.ppas,1602 :: 		
$00E0	$	_LOOP:
;math.ppas,1603 :: 		
$00E0	$0CFB			RRF	STACK_11, F
;math.ppas,1604 :: 		
$00E1	$0CFA			RRF	STACK_10, F
;math.ppas,1605 :: 		
$00E2	$0CF9			RRF	STACK_9, F
;math.ppas,1606 :: 		
$00E3	$0CF8			RRF	STACK_8, F
;math.ppas,1607 :: 		
$00E4	$0CF3			RRF	STACK_3, F
;math.ppas,1608 :: 		
$00E5	$0CF2			RRF	STACK_2, F
;math.ppas,1609 :: 		
$00E6	$0CF1			RRF	STACK_1, F
;math.ppas,1614 :: 		
$00E7	$0CF0			RRF	STACK_0, F
;math.ppas,1615 :: 		
$00E8	$1C03			BTFSS	STATUS, C
;math.ppas,1616 :: 		
$00E9	$28DC			GOTO	_NEXT
;math.ppas,1617 :: 		
$00EA	$03FC			DECF	STACK_12, F
;math.ppas,1618 :: 		
$00EB	$1903			BTFSC	STATUS, Z
;math.ppas,1625 :: 		
$00EC	$28FC			GOTO	_EXIT1
;math.ppas,1626 :: 		
$00ED	$0874			MOVF	STACK_4, W
;math.ppas,1627 :: 		
$00EE	$07F8			ADDWF	STACK_8, F
;math.ppas,1628 :: 		
$00EF	$0875			MOVF	STACK_5, W
;math.ppas,1629 :: 		
$00F0	$1803			BTFSC	STATUS, C
;math.ppas,1630 :: 		
$00F1	$0F75			INCFSZ	STACK_5, W
;math.ppas,1631 :: 		
$00F2	$07F9			ADDWF	STACK_9, F
;math.ppas,1632 :: 		
$00F3	$0876			MOVF	STACK_6, W
;math.ppas,1633 :: 		
$00F4	$1803			BTFSC	STATUS, C
;math.ppas,1634 :: 		
$00F5	$0F76			INCFSZ	STACK_6, W
;math.ppas,1635 :: 		
$00F6	$07FA			ADDWF	STACK_10, F
;math.ppas,1636 :: 		
$00F7	$0877			MOVF	STACK_7, W
;math.ppas,1637 :: 		
$00F8	$1803			BTFSC	STATUS, C
;math.ppas,1638 :: 		
$00F9	$0F77			INCFSZ	STACK_7, W
;math.ppas,1640 :: 		
$00FA	$07FB			ADDWF	STACK_11, F
;math.ppas,1642 :: 		
$00FB	$28E0			GOTO	_LOOP
;math.ppas,1647 :: 		
$00FC	$	_EXIT1:
;math.ppas,1648 :: 		
$00FC	$0874			MOVF	STACK_4, W
;math.ppas,1649 :: 		
$00FD	$07F8			ADDWF	STACK_8, F
;math.ppas,1650 :: 		
$00FE	$0875			MOVF	STACK_5, W
;math.ppas,1651 :: 		
$00FF	$1803			BTFSC	STATUS, C
;math.ppas,1652 :: 		
$0100	$0F75			INCFSZ	STACK_5, W
;math.ppas,1653 :: 		
$0101	$07F9			ADDWF	STACK_9, F
;math.ppas,1654 :: 		
$0102	$0876			MOVF	STACK_6, W
;math.ppas,1655 :: 		
$0103	$1803			BTFSC	STATUS, C
;math.ppas,1656 :: 		
$0104	$0F76			INCFSZ	STACK_6, W
;math.ppas,1657 :: 		
$0105	$07FA			ADDWF	STACK_10, F
;math.ppas,1658 :: 		
$0106	$0877			MOVF	STACK_7, W
;math.ppas,1659 :: 		
$0107	$1803			BTFSC	STATUS, C
;math.ppas,1660 :: 		
$0108	$0F77			INCFSZ	STACK_7, W
;math.ppas,1663 :: 		
$0109	$07FB			ADDWF	STACK_11, F
;math.ppas,1664 :: 		
$010A	$	_EXIT2:
;math.ppas,1665 :: 		
$010A	$	math_L_13:
;math.ppas,1666 :: 		
$010A	$0008			RETURN
$0004	$	_vdelay_ms:
;delays.pbas,65 :: 		dim NumberOfCyc as dword
;delays.pbas,67 :: 		NumberOfCyc = Clock_kHz >> 2 ' this will be done by compiler, no asm will be genereated except that for assignment
$0004	$30E8			MOVLW	232
$0005	$1303			BCF	STATUS, RP1
$0006	$1283			BCF	STATUS, RP0
$0007	$00AB			MOVWF	_vdelay_ms_local_numberofcyc
$0008	$3003			MOVLW	3
$0009	$00AC			MOVWF	_vdelay_ms_local_numberofcyc+1
$000A	$01AD			CLRF	_vdelay_ms_local_numberofcyc+2
$000B	$01AE			CLRF	_vdelay_ms_local_numberofcyc+3
;delays.pbas,68 :: 		NumberOfCyc = Time_ms * NumberOfCyc
$000C	$0829			MOVF	FARG_VDelay_ms, 0
$000D	$00F0			MOVWF	STACK_0
$000E	$082A			MOVF	FARG_VDelay_ms+1, 0
$000F	$00F1			MOVWF	STACK_0+1
$0010	$01F2			CLRF	STACK_0+2
$0011	$01F3			CLRF	STACK_0+3
$0012	$30E8			MOVLW	232
$0013	$00F4			MOVWF	STACK_4
$0014	$3003			MOVLW	3
$0015	$00F5			MOVWF	STACK_4+1
$0016	$3000			MOVLW	0
$0017	$00F6			MOVWF	STACK_4+2
$0018	$3000			MOVLW	0
$0019	$00F7			MOVWF	STACK_4+3
$001A	$20D4			CALL	_mul_32x32_u
$001B	$0870			MOVF	STACK_0, 0
$001C	$00AB			MOVWF	_vdelay_ms_local_numberofcyc
$001D	$0871			MOVF	STACK_0+1, 0
$001E	$00AC			MOVWF	_vdelay_ms_local_numberofcyc+1
$001F	$0872			MOVF	STACK_0+2, 0
$0020	$00AD			MOVWF	_vdelay_ms_local_numberofcyc+2
$0021	$0873			MOVF	STACK_0+3, 0
$0022	$00AE			MOVWF	_vdelay_ms_local_numberofcyc+3
;delays.pbas,69 :: 		if NumberOfCyc < 675 then
$0023	$3000			MOVLW	0
$0024	$0273			SUBWF	STACK_0+3, 0
$0025	$1D03			BTFSS	STATUS, Z
$0026	$2831			GOTO	L_VDelay_ms_0
$0027	$3000			MOVLW	0
$0028	$0272			SUBWF	STACK_0+2, 0
$0029	$1D03			BTFSS	STATUS, Z
$002A	$2831			GOTO	L_VDelay_ms_0
$002B	$3002			MOVLW	2
$002C	$0271			SUBWF	STACK_0+1, 0
$002D	$1D03			BTFSS	STATUS, Z
$002E	$2831			GOTO	L_VDelay_ms_0
$002F	$30A3			MOVLW	163
$0030	$0270			SUBWF	STACK_0, 0
$0031	$	L_VDelay_ms_0:
$0031	$1803			BTFSC	STATUS, C
$0032	$2834			GOTO	delays_L_19
$0033	$	delays_L_18:
;delays.pbas,70 :: 		exit
$0033	$288B			GOTO	delays_L_17
$0034	$	delays_L_19:
;delays.pbas,71 :: 		end if
$0034	$	delays_L_20:
;delays.pbas,72 :: 		NumberOfCyc = NumberOfCyc - 675
$0034	$30A3			MOVLW	163
$0035	$00F0			MOVWF	STACK_0
$0036	$3002			MOVLW	2
$0037	$00F1			MOVWF	STACK_0+1
$0038	$01F2			CLRF	STACK_0+2
$0039	$01F3			CLRF	STACK_0+3
$003A	$082B			MOVF	_vdelay_ms_local_numberofcyc, 0
$003B	$00F4			MOVWF	STACK_4
$003C	$082C			MOVF	_vdelay_ms_local_numberofcyc+1, 0
$003D	$00F5			MOVWF	STACK_4+1
$003E	$082D			MOVF	_vdelay_ms_local_numberofcyc+2, 0
$003F	$00F6			MOVWF	STACK_4+2
$0040	$082E			MOVF	_vdelay_ms_local_numberofcyc+3, 0
$0041	$00F7			MOVWF	STACK_4+3
$0042	$0870			MOVF	STACK_0, 0
$0043	$02F4			SUBWF	STACK_4, 1
$0044	$0871			MOVF	STACK_0+1, 0
$0045	$1C03			BTFSS	STATUS, C
$0046	$0F71			INCFSZ	STACK_0+1, 0
$0047	$02F5			SUBWF	STACK_4+1, 1
$0048	$0872			MOVF	STACK_0+2, 0
$0049	$1C03			BTFSS	STATUS, C
$004A	$0F72			INCFSZ	STACK_0+2, 0
$004B	$02F6			SUBWF	STACK_4+2, 1
$004C	$0873			MOVF	STACK_0+3, 0
$004D	$1C03			BTFSS	STATUS, C
$004E	$0F73			INCFSZ	STACK_0+3, 0
$004F	$02F7			SUBWF	STACK_4+3, 1
$0050	$0874			MOVF	STACK_4, 0
$0051	$00AB			MOVWF	_vdelay_ms_local_numberofcyc
$0052	$0875			MOVF	STACK_4+1, 0
$0053	$00AC			MOVWF	_vdelay_ms_local_numberofcyc+1
$0054	$0876			MOVF	STACK_4+2, 0
$0055	$00AD			MOVWF	_vdelay_ms_local_numberofcyc+2
$0056	$0877			MOVF	STACK_4+3, 0
$0057	$00AE			MOVWF	_vdelay_ms_local_numberofcyc+3
;delays.pbas,73 :: 		NumberOfCyc = NumberOfCyc >> 5  ' Dec and While below take around 32 instructions
$0058	$3005			MOVLW	5
$0059	$00F0			MOVWF	STACK_0
$005A	$0874			MOVF	STACK_4, 0
$005B	$00AB			MOVWF	_vdelay_ms_local_numberofcyc
$005C	$0875			MOVF	STACK_4+1, 0
$005D	$00AC			MOVWF	_vdelay_ms_local_numberofcyc+1
$005E	$0876			MOVF	STACK_4+2, 0
$005F	$00AD			MOVWF	_vdelay_ms_local_numberofcyc+2
$0060	$0877			MOVF	STACK_4+3, 0
$0061	$00AE			MOVWF	_vdelay_ms_local_numberofcyc+3
$0062	$0870			MOVF	STACK_0, 0
$0063	$	L_VDelay_ms_1:
$0063	$1903			BTFSC	STATUS, Z
$0064	$286C			GOTO	L_VDelay_ms_2
$0065	$0CAE			RRF	_vdelay_ms_local_numberofcyc+3, 1
$0066	$0CAD			RRF	_vdelay_ms_local_numberofcyc+2, 1
$0067	$0CAC			RRF	_vdelay_ms_local_numberofcyc+1, 1
$0068	$0CAB			RRF	_vdelay_ms_local_numberofcyc, 1
$0069	$13AE			BCF	_vdelay_ms_local_numberofcyc+3, 7
$006A	$3FFF			ADDLW	255
$006B	$2863			GOTO	L_VDelay_ms_1
$006C	$	L_VDelay_ms_2:
;delays.pbas,74 :: 		while ( Lo(NumberOfCyc) or Hi(NumberOfCyc) or Higher(NumberOfCyc) or Highest(NumberOfCyc) ) <> 0
$006C	$	delays_L_22:
$006C	$30FF			MOVLW	255
$006D	$052B			ANDWF	_vdelay_ms_local_numberofcyc, 0
$006E	$00F8			MOVWF	STACK_8
$006F	$082C			MOVF	_vdelay_ms_local_numberofcyc+1, 0
$0070	$00F0			MOVWF	STACK_0
$0071	$0870			MOVF	STACK_0, 0
$0072	$04F8			IORWF	STACK_8, 1
$0073	$082D			MOVF	_vdelay_ms_local_numberofcyc+2, 0
$0074	$00F0			MOVWF	STACK_0
$0075	$082E			MOVF	_vdelay_ms_local_numberofcyc+3, 0
$0076	$00F1			MOVWF	STACK_0+1
$0077	$0870			MOVF	STACK_0, 0
$0078	$04F8			IORWF	STACK_8, 1
$0079	$082E			MOVF	_vdelay_ms_local_numberofcyc+3, 0
$007A	$00F0			MOVWF	STACK_0
$007B	$0870			MOVF	STACK_0, 0
$007C	$0478			IORWF	STACK_8, 0
$007D	$00F4			MOVWF	STACK_4
$007E	$0874			MOVF	STACK_4, 0
$007F	$3A00			XORLW	0
$0080	$1903			BTFSC	STATUS, Z
$0081	$288B			GOTO	delays_L_23
;delays.pbas,75 :: 		Dec(NumberOfCyc)
$0082	$3001			MOVLW	1
$0083	$02AB			SUBWF	_vdelay_ms_local_numberofcyc, 1
$0084	$1C03			BTFSS	STATUS, C
$0085	$02AC			SUBWF	_vdelay_ms_local_numberofcyc+1, 1
$0086	$1C03			BTFSS	STATUS, C
$0087	$02AD			SUBWF	_vdelay_ms_local_numberofcyc+2, 1
$0088	$1C03			BTFSS	STATUS, C
$0089	$02AE			SUBWF	_vdelay_ms_local_numberofcyc+3, 1
$008A	$286C			GOTO	delays_L_22
$008B	$	delays_L_23:
;delays.pbas,76 :: 		wend
$008B	$	delays_L_17:
$008B	$0008			RETURN
$008C	$	_giramotor:
;DriverDeControle.pbas,7 :: 		sub procedure giraMotor()
;DriverDeControle.pbas,9 :: 		while PORTA.0 = 1
$008C	$	DriverDeControle_L_2:
$008C	$3001			MOVLW	1
$008D	$1303			BCF	STATUS, RP1
$008E	$1283			BCF	STATUS, RP0
$008F	$0505			ANDWF	PORTA, 0
$0090	$00F1			MOVWF	STACK_1
$0091	$0871			MOVF	STACK_1, 0
$0092	$3A01			XORLW	1
$0093	$1D03			BTFSS	STATUS, Z
$0094	$28D3			GOTO	DriverDeControle_L_3
;DriverDeControle.pbas,10 :: 		if invert = true then
$0095	$0820			MOVF	_invert, 0
$0096	$3AFF			XORLW	255
$0097	$1D03			BTFSS	STATUS, Z
$0098	$28B6			GOTO	DriverDeControle_L_7
$0099	$	DriverDeControle_L_6:
;DriverDeControle.pbas,11 :: 		PORTC=1 VDelay_ms(tmpOn)
$0099	$3001			MOVLW	1
$009A	$0087			MOVWF	PORTC
$009B	$0821			MOVF	_tmpon, 0
$009C	$00A9			MOVWF	FARG_VDelay_ms
$009D	$0822			MOVF	_tmpon+1, 0
$009E	$00AA			MOVWF	FARG_VDelay_ms+1
$009F	$2004			CALL	_vdelay_ms
;DriverDeControle.pbas,12 :: 		PORTC=2 vdelay_ms(tmpOn)
$00A0	$3002			MOVLW	2
$00A1	$0087			MOVWF	PORTC
$00A2	$0821			MOVF	_tmpon, 0
$00A3	$00A9			MOVWF	FARG_VDelay_ms
$00A4	$0822			MOVF	_tmpon+1, 0
$00A5	$00AA			MOVWF	FARG_VDelay_ms+1
$00A6	$2004			CALL	_vdelay_ms
;DriverDeControle.pbas,13 :: 		PORTC=4 vdelay_ms(tmpOn)
$00A7	$3004			MOVLW	4
$00A8	$0087			MOVWF	PORTC
$00A9	$0821			MOVF	_tmpon, 0
$00AA	$00A9			MOVWF	FARG_VDelay_ms
$00AB	$0822			MOVF	_tmpon+1, 0
$00AC	$00AA			MOVWF	FARG_VDelay_ms+1
$00AD	$2004			CALL	_vdelay_ms
;DriverDeControle.pbas,14 :: 		PORTC=8 vdelay_ms(tmpOn)
$00AE	$3008			MOVLW	8
$00AF	$0087			MOVWF	PORTC
$00B0	$0821			MOVF	_tmpon, 0
$00B1	$00A9			MOVWF	FARG_VDelay_ms
$00B2	$0822			MOVF	_tmpon+1, 0
$00B3	$00AA			MOVWF	FARG_VDelay_ms+1
$00B4	$2004			CALL	_vdelay_ms
$00B5	$28D2			GOTO	DriverDeControle_L_8
;DriverDeControle.pbas,15 :: 		else
$00B6	$	DriverDeControle_L_7:
;DriverDeControle.pbas,16 :: 		PORTC=8 vdelay_ms(tmpOn)
$00B6	$3008			MOVLW	8
$00B7	$0087			MOVWF	PORTC
$00B8	$0821			MOVF	_tmpon, 0
$00B9	$00A9			MOVWF	FARG_VDelay_ms
$00BA	$0822			MOVF	_tmpon+1, 0
$00BB	$00AA			MOVWF	FARG_VDelay_ms+1
$00BC	$2004			CALL	_vdelay_ms
;DriverDeControle.pbas,17 :: 		PORTC=4 vdelay_ms(tmpOn)
$00BD	$3004			MOVLW	4
$00BE	$0087			MOVWF	PORTC
$00BF	$0821			MOVF	_tmpon, 0
$00C0	$00A9			MOVWF	FARG_VDelay_ms
$00C1	$0822			MOVF	_tmpon+1, 0
$00C2	$00AA			MOVWF	FARG_VDelay_ms+1
$00C3	$2004			CALL	_vdelay_ms
;DriverDeControle.pbas,18 :: 		PORTC=2 vdelay_ms(tmpOn)
$00C4	$3002			MOVLW	2
$00C5	$0087			MOVWF	PORTC
$00C6	$0821			MOVF	_tmpon, 0
$00C7	$00A9			MOVWF	FARG_VDelay_ms
$00C8	$0822			MOVF	_tmpon+1, 0
$00C9	$00AA			MOVWF	FARG_VDelay_ms+1
$00CA	$2004			CALL	_vdelay_ms
;DriverDeControle.pbas,19 :: 		PORTC=1 vdelay_ms(tmpOn)
$00CB	$3001			MOVLW	1
$00CC	$0087			MOVWF	PORTC
$00CD	$0821			MOVF	_tmpon, 0
$00CE	$00A9			MOVWF	FARG_VDelay_ms
$00CF	$0822			MOVF	_tmpon+1, 0
$00D0	$00AA			MOVWF	FARG_VDelay_ms+1
$00D1	$2004			CALL	_vdelay_ms
;DriverDeControle.pbas,20 :: 		end if
$00D2	$	DriverDeControle_L_8:
$00D2	$288C			GOTO	DriverDeControle_L_2
$00D3	$	DriverDeControle_L_3:
;DriverDeControle.pbas,21 :: 		wend
$00D3	$	DriverDeControle_L_0:
$00D3	$0008			RETURN
$0134	$	_usart_init:
;USART_b75.ppas,22 :: 		
;USART_b75.ppas,24 :: 		
$0134	$	USART_b75_L_1:
$0134	$1303			BCF	STATUS, RP1
$0135	$1683			BSF	STATUS, RP0
$0136	$1698			BSF	TXSTA, 5
$0137	$	USART_b75_L_2:
;USART_b75.ppas,25 :: 		
$0137	$3090			MOVLW	144
$0138	$1283			BCF	STATUS, RP0
$0139	$0098			MOVWF	RCSTA
;USART_b75.ppas,31 :: 		
$013A	$	USART_b75_L_3:
$013A	$1683			BSF	STATUS, RP0
$013B	$1686			BSF	TRISB, 5
$013C	$	USART_b75_L_4:
;USART_b75.ppas,32 :: 		
$013C	$	USART_b75_L_5:
$013C	$1786			BSF	TRISB, 7
$013D	$	USART_b75_L_6:
;USART_b75.ppas,35 :: 		
$013D	$	USART_b75_L_8:
$013D	$1283			BCF	STATUS, RP0
$013E	$080C			MOVF	PIR1, 0
$013F	$00F1			MOVWF	STACK_1
$0140	$3000			MOVLW	0
$0141	$1AF1			BTFSC	STACK_1, 5
$0142	$3001			MOVLW	1
$0143	$00F1			MOVWF	STACK_1
$0144	$0871			MOVF	STACK_1, 0
$0145	$3A01			XORLW	1
$0146	$1903			BTFSC	STATUS, Z
$0147	$293D			GOTO	USART_b75_L_8
;USART_b75.ppas,36 :: 		
$0148	$	USART_b75_L_9:
$0148	$	USART_b75_L_0:
;USART_b75.ppas,37 :: 		
$0148	$0008			RETURN
$010B	$	_main:
;DriverDeControle.pbas,26 :: 		main:
$010B	$	_main_main:
;DriverDeControle.pbas,27 :: 		TRISA=%11111111
$010B	$30FF			MOVLW	255
$010C	$1303			BCF	STATUS, RP1
$010D	$1683			BSF	STATUS, RP0
$010E	$0085			MOVWF	TRISA
;DriverDeControle.pbas,28 :: 		TRISB=%11111111
$010F	$30FF			MOVLW	255
$0110	$0086			MOVWF	TRISB
;DriverDeControle.pbas,29 :: 		TRISC=%00000000
$0111	$0187			CLRF	TRISC, 1
;DriverDeControle.pbas,30 :: 		INTCON=%00000000
$0112	$018B			CLRF	INTCON, 1
;DriverDeControle.pbas,31 :: 		ANSEL=%00000000
$0113	$1703			BSF	STATUS, RP1
$0114	$1283			BCF	STATUS, RP0
$0115	$019E			CLRF	ANSEL, 1
;DriverDeControle.pbas,32 :: 		ANSELH=%00000000
$0116	$019F			CLRF	ANSELH, 1
;DriverDeControle.pbas,33 :: 		PORTA=0
$0117	$1303			BCF	STATUS, RP1
$0118	$0185			CLRF	PORTA, 1
;DriverDeControle.pbas,34 :: 		PORTC=0
$0119	$0187			CLRF	PORTC, 1
;DriverDeControle.pbas,36 :: 		Usart_Init(9600)
$011A	$3019			MOVLW	25
$011B	$1683			BSF	STATUS, RP0
$011C	$0099			MOVWF	SPBRG
$011D	$1518			BSF	TXSTA, BRGH
$011E	$2134			CALL	_usart_init
;DriverDeControle.pbas,38 :: 		tmpOn=50
$011F	$3032			MOVLW	50
$0120	$00A1			MOVWF	_tmpon
$0121	$01A2			CLRF	_tmpon+1
;DriverDeControle.pbas,39 :: 		tmpOff=0
$0122	$01A3			CLRF	_tmpoff
$0123	$01A4			CLRF	_tmpoff+1
;DriverDeControle.pbas,40 :: 		invert=false
$0124	$01A0			CLRF	_invert, 1
;DriverDeControle.pbas,42 :: 		executa:
$0125	$	_main_executa:
;DriverDeControle.pbas,44 :: 		if PORTA.1 = 0 then
$0125	$3000			MOVLW	0
$0126	$1885			BTFSC	PORTA, 1
$0127	$3001			MOVLW	1
$0128	$00F1			MOVWF	STACK_1
$0129	$0871			MOVF	STACK_1, 0
$012A	$3A00			XORLW	0
$012B	$1D03			BTFSS	STATUS, Z
$012C	$2930			GOTO	DriverDeControle_L_11
$012D	$	DriverDeControle_L_10:
;DriverDeControle.pbas,45 :: 		invert = true
$012D	$30FF			MOVLW	255
$012E	$00A0			MOVWF	_invert
$012F	$2931			GOTO	DriverDeControle_L_12
;DriverDeControle.pbas,46 :: 		else
$0130	$	DriverDeControle_L_11:
;DriverDeControle.pbas,47 :: 		invert = false
$0130	$01A0			CLRF	_invert, 1
;DriverDeControle.pbas,48 :: 		end if
$0131	$	DriverDeControle_L_12:
;DriverDeControle.pbas,50 :: 		giraMotor()
$0131	$208C			CALL	_giramotor
;DriverDeControle.pbas,52 :: 		goto executa
$0132	$2925			GOTO	_main_executa
$0133	$2933			GOTO	$
